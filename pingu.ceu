type PointF = [x:_float,y:_float]

type Pingu = task PointF -> () -> ()

var gravity: _float = _(-0.2)

task pingu: Pingu {
    var spd: PointF = [_0,_0]
    var pos: PointF = arg

    task faller: () -> () -> () {
        every evt?Frame {
            set spd.y = fadd [spd.y, fdiv [fmul [evt!Frame::_float,gravity], _1000]]
        }
    }

    spawn faller ()

    par {
        every evt?Draw {
            output pico Pico.Output.Set.Image.Crop [[_0,_0],[_32,_32]]
            output pico Pico.Output.Set.Image.Size [_32,_32]
            output pico Pico.Output.Draw.Image [[pos.x::_int,pos.y::_int], _("data/images/walker.png")]
        }
    } with {
        every evt?Frame {
            set pos.y = fadd [pos.y, fmul [evt!Frame::_float,spd.y]]
        }
    }
}



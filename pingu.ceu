var gravity = -0.2

task Sprite (pos, n, path) {
    var sz = pico_state_get_size_image(path)
    var w = sz.0 / n
    var h = sz.1

    var i
    par {
        set i = 0
        every 25ms {
            set i = (i+w) % sz.0
        }
    } with {
        every :draw {
            pico_state_set_image_crop(i,0, w,h)
            pico_state_set_size_image(w,h)
            pico_output_draw_image(pos.0, pos.1, path)
        }
    }
}

task Pingu (pos) {
    var spd = [0,0]

    task Faller () { {:ret}
        defer {
            set spd.1 = 0
        }
        spawn Sprite(pos, 8, "data/images/faller.png")
println(pos, pos.1)
        every :frame {
println(pos, pos.1)
            if pos.1 < -200 {
                throw(:ret)
            }
            set spd.y = spd.y + ((evt.0*gravity) / 1000)
        }
    }

    task Walker () {
        while true {
            do {
                set spd.0 = 0.05
                spawn Sprite(pos, 8, "data/images/right.png")
                await (evt is :frame) and (pos.0 >= 300)
            }
            do {
                set spd.0 = -0.05
                spawn Sprite(pos, 8, "data/images/left.png")
                await (evt is :frame) and (pos.0 <= -320)
            }
        }
    }

    spawn {
        await spawn Faller ()
        await spawn Walker ()
    }

    every :frame {
        set pos.0 = pos.0 + (evt.0*spd.x)
        set pos.1 = pos.1 + (evt.0*spd.y)
    }
}



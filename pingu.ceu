val G = -0.2

task Sprite (pos:XY, n, path) {
    val dim  :WH = pico-state-get-size-image(path)
    val dim' :WH = [dim.w/n, dim.h]

    var i
    par {
        set i = 0
        every :25:ms {
            set i = (i+dim'.w) % dim.w
        }
    } with {
        every :Pico.Draw {
            pico-state-set-image-crop([[i,0], dim'])
            pico-state-set-size-image(dim')
            pico-output-draw-image(pos, path)
        }
    }
}

task Pingu (pos :XY) {
    val spd :XY = [0,0]

    task Faller () {
        defer {
            set spd.y = 0
        }
        spawn Sprite(pos, 8, "data/images/faller.png")
        every :Pico.Frame {
            set spd.y = spd.y + ((it.ms*G) / 1000)
            until pos.y < -200
        }
    }

    task Walker () {
        loop {
            do {
                set spd.x = 0.05
                spawn Sprite(pos, 8, "data/images/right.png")
                await(:Pico.Frame, pos.x >= 320)
            }
            do {
                set spd.x = -0.05
                spawn Sprite(pos, 8, "data/images/left.png")
                await(:Pico.Frame, pos.x <= -320)
            }
        }
    }

    spawn {
        await spawn Faller ()
        await spawn Walker ()
    }

    every :Pico.Frame {
        set pos.x = pos.x + (it.ms*spd.x)
        set pos.y = pos.y + (it.ms*spd.y)
    }
}

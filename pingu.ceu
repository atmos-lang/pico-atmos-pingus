val G = 0.2

func Sprite (pos, n, path) {
    val img = ren where {
        sfc = IMG.load(path) -> assert
        ren = REN::createTextureFromSurface(sfc) -> assert
    }
    val _,_,W,h = img::query()
    val w = W / n --> math.floor

    var i
    par {
        set i = 0
        every @.25 {
            set i = (i+w) % W
        }
    } with {
        every :Pico.Draw {
            val rect = @{x=pos.x, y=pos.y, w=w, h=h}
            val crop = @{ x=i, y=0, w=w, h=h }
            REN::copy(img, crop, rect)
        }
    }
}

func Pingu (pos) {
    val spd = @{x=0,y=0}

    val Faller = func () {
        defer {
            set spd.y = 0
        }
        spawn Sprite(pos, 8, "data/images/faller.png")
        every :Pico.Frame {
            set spd.y = spd.y + ((evt*G) / 1000)
            until (pos.y > 400)
        }
    }

    val Walker = func () {
        loop {
            do {
                set spd.x = 0.05
                spawn Sprite(pos, 8, "data/images/right.png")
                await(:Pico.Frame, pos.x > 600)
            }
            do {
                set spd.x = -0.05
                spawn Sprite(pos, 8, "data/images/left.png")
                await(:Pico.Frame, pos.x < 40)
            }
        }
    }

    spawn {
        await Faller ()
        await Walker ()
    }

    every :Pico.Frame {
        set pos.x = pos.x + (evt*spd.x) --> math.floor
        set pos.y = pos.y + (evt*spd.y) --> math.floor
    }
}

return <- Pingu
